<head>
    <style>
        body {
            background: white;
        }
        #link {
            width: 30px;
            height: 38px;
            display: none;
            position: absolute;
        }
        canvas {
            position: absolute;
            top:0;
            left: 0;
        }
        .asset {
            display: none;
        }
        .chat-message {
            width: 100%;
            position: fixed;
            bottom: 0;
            left: 0;
            display: none;
        }
    </style>
</head>
<body>
    <canvas id="link-map"></canvas>
    <img src="/images/lttp_spritesheet2.png" class="asset" id="link_sprites">
    <img src="/images/sprites/hud/hearts.png" class="asset" id="link_hearts">
    <img src="/images/sprites/hero/miscellaneous.png" class="asset" id="link_hurt">
    <img src="/images/sprites/hero/dying.png" class="asset" id="link_dying">

<script>
    var canvas, ctx; 
    var player_dead = false,
        background = new Image(),
        socket = new io('<%= ENV['GAME_SERVER'] %>'),
        is_typing = false,
        block_input = false;
        sounds = { 
            link_hurt: new Audio('/sounds/link_hurt.wav'),
            sword: new Audio('/sounds/lttp_sword.wav'),
            overworld: new Audio('/sounds/lttp_overworld_full.wav'),
            overworld_loop: new Audio('/sounds/lttp_overworld_loop.wav'),
            link_dying: new Audio('/sounds/hero_dying.ogg')
        },
        map = {},
        then = Date.now(),
        fps = 20,
        fps_interval = 1000 / fps,
        players = {},
        death_frame = 0;


    var now, block_input_start, block_input_now;

    const LEFT = 37, UP = 38, RIGHT = 39, DOWN = 40, SPACE = 32 ,ENTER = 13;

    //initial positions in sprite sheet, all you have to do is add status*30 to sprite to get the next one
    const link_sprites = {
        up: {
            x: 0,
            y: 120
        },
        left: {
            x: 240,
            y: 30
        },
        down: {
            x: 0,
            y: 30
        },
        right: {
            x: 240,
            y: 120
        }
    }
    const heart_sprites = {
        whole: {
            x: 0,
            y: 0
        },
        half: {
            x: 8,
            y:0
        },
        empty: {
            x: 16,
            y: 0
        }
    }

    const sword_sprites = {
        up: [
            { 
                x:-1,
                y:180,
                width: 30,
                height: 33
            },
            {
                x: 28,
                y: 182,
                width: 30,
                height: 33
            },
            {
                x: 57,
                y: 175,
                width: 30,
                height:30
            },
            {
                x: 89,
                y: 178,
                width: 27,
                height: 30
            },
            {
                x: 125,
                y: 175,
                width: 55,
                height: 35
            }
        ],
        left: [
            {
                x: 237,
                y: 90,
                width: 30,
                height: 30
            },
            {  
                x: 265,
                y: 90,
                width: 30,
                height: 30
            },
            {
                x: 295,
                y: 90,
                width: 31,
                height: 30
            },
            {
                x: 328,
                y: 90,
                width: 30,
                height: 30
            },
            {
                x: 360,
                y: 90,
                width: 30,
                height: 30
            }
        ],
        right: [
            {
                x: 238,
                y: 180,
                width: 30,
                height: 28
            },
            {
                x: 263,
                y: 180,
                width: 30,
                height: 28
            },
            {
                x: 295,
                y: 180,
                width: 30,
                height: 30 
            },
            {
                x: 325,
                y: 180,
                width: 30,
                height: 30 
            },
            {
                x: 355,
                y: 177,
                width: 30,
                height: 30 
            }
        ],
        down: [
            {
                x: 0,
                y: 85,
                width: 30,
                height: 30
            },
            {
                x: 30,
                y: 85,
                width: 30,
                height:30
            },
            {
                x: 60,
                y: 85,
                width: 30,
                height: 30
            },
            {
                x: 85,
                y: 85,
                width: 30,
                height: 30
            },
            {
                x: 115 ,
                y: 85,
                width: 30,
                height: 30
            }
        ]
    }
    const link_hurt_sprites = {
        right: {
            x: 0,
            y: 24
        },
        up: {
            x: 24,
            y: 24
        },
        left: {
            x: 48,
            y: 24
        },
        down: {
            x: 72,
            y: 24
        }
    }

    background.src = '/images/lttp_map.jpg';

    $(() => {
        sounds.overworld.onended = sounds.overworld_loop.onended = function() {
            console.log('relooping sound');
            sounds.overworld_loop.play();    
        }


        //sounds.overworld.play();

        canvas = document.getElementById('link-map');

        ctx = canvas.getContext('2d');
        
        background.onload = function() {
            canvas.width = 1920;
            canvas.height = 1080;

            ctx.drawImage(background, 0, 0);
        }

        render();
 
        socket.emit('game-start', '<%= @username %>');

        socket.on('position', (data) => {
            player = "<%= @username %>"
            //don't move link if he's currently using his sword
            if (!player[data.player].use_sword) {
                if (data.collision) {
                    sounds.link_hurt.play();
                }

                players[data.player] = data;
            }

        })


        socket.on('collision', function(data) {
            sounds.link_hurt.play();
            //sounds.link_hurt.play();

            players[data.username] = data.player;
            players[data.username].collision = true;
        })

        socket.on('stop-charging', function(player) {
            if (players[player]) {
                players[player].charging_sword = false;    
            }
            
        })


        socket.on('disconnect', function(player) {
            delete players[player];
        })

        socket.on('add-player', function(_players) {
            players = _players;
        })

        socket.on('use-sword', function(player) {
            sounds.sword.play();
            players[player].sword_index = 0;
            players[player].charging_sword = true;
            players[player].use_sword = true;
            

            console.log(players[player].charging_sword);

            //use_sword(player);
        });

        socket.on('player_death', function(player) {
            if (player == '<%= @username %>') {
                //show game over screen and give option to restart
                show_game_over();
            }
            else {
                //show opponent dying, which is just one frame
                players[player].dying = true;
                players[player].death_index = 0;
            }
        })

        

        //$(document).keyup(check_keys);
        //$(document).keydown(check_keys);

        document.addEventListener('keydown', check_keys);
        document.addEventListener('keyup', check_keys);

    })
    
    function handleInput() {
        var player = "<%= @username %>"
        
        
        if (block_input) {
            //if (!block_input_start) {
                //block_input_start = Date.now();
            //}
            //else {
                //block_input_now = Date.now();

                // if (block_input_now - block_input_start > 420) {
                //     if (!players[player].use_sword && players[player].sword_index && players[player].sword_index != 5) {
                //         players[player].use_sword = true;
                //         players[player].sword_index = 0;
                //     }
                //     block_input_start = null;
                // }
            //}

            // console.log(players[player].use_sword + " <--- using_sword?, sword_index ---->" + players[player].sword_index);

            

            console.log('currently blocking input');
        }
        if (!block_input && players[player]) {
            if (map[SPACE] && !players[player].charging_sword) {
                players[player].charging_sword = true;
                emit_sword_event();
            } 
            else if (map[LEFT] && map[UP]) {
                move_link('northwest');
            }
            else if (map[RIGHT] && map[UP]) {
                move_link('northeast');
            }
            else if (map[RIGHT] && map[DOWN]) {
                move_link('southeast');
            }
            else if (map[LEFT] && map[DOWN]) {
                move_link('southwest');
            }
            else if (map[UP]) {
                move_link('up');
            }
            else if (map[DOWN]) {
                move_link('down');
            }
            else if (map[LEFT]) {
                move_link('left');
            }
            else if (map[RIGHT]) {
                move_link('right');
            }
            else if (!map[SPACE]) {
                players[player].charging_sword = false;
                socket.emit('stop-charging', player); 
            } 

        }
        // else if (players[player].use_sword) {
        //     var sprite = getSwordSprite(players[player].direction, players[player].sword_index) //do this tomorrow
        //     render_sword_frame(sprite, players[player].position);
        // }
    }

    function emit_sword_event() {
        var username = "<%= @username %>"

        if (!player_dead) {
            socket.emit('use-sword', username);

            players[username].sword_index = 0;

            sounds.sword.play();
            //use_sword(username);
            block_input = true;
            players[username].use_sword = true;
        }
        
    }
    function move_link(direction) {
        var username = "<%= @username %>"
        if (!map[SPACE]) {
            players[username].charging_sword = false;
            socket.emit('stop-charging', username); 
        }

        if (!player_dead) {
            //trying everything to get this to work lmao
            if (!block_input && !players[username].use_sword) {
                socket.emit('move-link', {
                    player: username,
                    direction: direction,
                    charging_sword: players[username].charging_sword,
                    use_sword: players[username].use_sword
                });
            }
        }
    }

    function show_game_over() {
        if (!player_dead) {
            sounds.link_dying.play();
            player_dead = true;

            var sprite = {
                x: 87,
                y: 207,
                width: 30,
                height: 30
            };

            show_death_animation();

            handleInput();
        }
    }

    function show_death_animation() {

        now = Date.now();

        delta = now - then;
        if (delta > (1000/10)) {
            if (death_frame == 10) {
                death_frame = 0;

                ctx.font = "30px Georgia";

                ctx.strokeStyle = 'gold';
                ctx.strokeText("GAME OVER", canvas.width/3.2, canvas.height/3);

                return;
            }
            else {
                ctx.fillStyle = 'red';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            }
            var sprite = {
                x: 0 + (24 * death_frame),
                y: 0,
                width: 24,
                height: 24,

            };

            ctx.drawImage(document.getElementById('link_dying'),
                sprite.x, sprite.y,
                sprite.width, sprite.height,
                canvas.width/3, canvas.height/2.5,
                sprite.width, sprite.height
            );

            death_frame++;  
            then = now - (delta % (1000/10)); 
        }
        requestAnimationFrame(show_death_animation)
    }

    function render_sword_frame(sprite, position) {
        ctx.save();
        var size = { w: 30, h: 30};

        ctx.drawImage(document.getElementById('link_sprites'), 
            sprite.x, sprite.y,
            sprite.width, sprite.height,
            position.x, position.y,
            sprite.width, sprite.height
        );

        ctx.restore();
    }

    function render() {
        now = Date.now();
        var delta = now - then;
        handleInput(); 
        if (!player_dead) {
            if (delta > fps_interval) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(background, 0, 0);

                if (players["<%= @username %>"]) {
                    render_heart_sprites();
                    if (!map[SPACE]) {
                        players["<%= @username %>"].charging_sword = false;
                        socket.emit('stop-charging', "<%= @username %>"); 
                    }
                }

                

                for (var prop in players) {
                    if (players.hasOwnProperty(prop)) {
                        if (players[prop].use_sword) {                        
                            if (players[prop].sword_index == 5) {
                                delete players[prop].use_sword;
                                players[prop].sword_index = 0;
                                
                                
                                renderPlayer(players[prop]);
                                setTimeout(() => { 
                                    block_input = false;
                                    block_input_start = null;
                                }, 250);
                            }

                            var sprite = getSwordSprite(players[prop].direction, players[prop].sword_index);

                            render_sword_frame(sprite, players[prop].position);

                            players[prop].sword_index++;
                        }
                        else if (players[prop].charging_sword) {
                            var status = players[prop].direction == 'down' ? 3 : 2;
                            var sprite = getSwordSprite(players[prop].direction, status);

                            render_sword_frame(sprite, players[prop].position);
                        }
                        else if (players[prop].collision) {
                            if (!players[prop].collision_frame) {
                                players[prop].collision_frame = 0;
                            }
                            if (players[prop].collision_frame == 5) {
                                delete players[prop].collision;
                                delete players[prop].collision_frame;
                            }
                            else {
                                renderHurtPlayer(prop);
                                players[prop].collision_frame++;
                            }
                            
                        }
                        else if (players[prop].dying) {
                            if (players[prop].death_index == 20) {
                                delete players[prop].dying;
                                delete players[prop].death_index;

                                delete players[prop];
                            }
                            else {
                                renderDeadPlayer(prop);
                                players[prop].death_index++;   
                            }
                            
                        }
                        else {
                            renderPlayer(players[prop]);              
                        }

                    }
                }
                then = now - (delta % (1000/30));
            }    
            requestAnimationFrame(render);
        }

    }

    function renderDeadPlayer(player) {
        ctx.save();
        var sprite = {
            x: 90,
            y: 215,
            width: 24,
            height: 16
        }

        ctx.drawImage(document.getElementById('link_sprites'),
            sprite.x, sprite.y,
            sprite.width, sprite.height,
            players[player].position.x, players[player].position.y,
            sprite.width, sprite.height
        );

        ctx.restore();
    }

    function renderHurtPlayer(player) {
        ctx.save();
        let direction = players[player].direction;
        let position = players[player].position;

        if (direction.substring(0,5) == 'north') {
            direction = 'up';
        }
        else if (direction.substring(0,5) == 'south') {
            direction = 'down';
        }

        var sprite = link_hurt_sprites[direction];

        var size = {
            w: 24,
            h: 24
        }

        ctx.drawImage(document.getElementById('link_hurt'),
            sprite.x, sprite.y,
            size.w, size.h,
            position.x, position.y,
            size.w, size.h
        );

        ctx.restore();
    }

    function renderPlayer(player) {
        ctx.save();

        //ctx.translate();

        var size = { w: 30, h: 30};
        var sprite = {};

        sprite = getLinkSprite(player.direction, player.status);

        ctx.drawImage(document.getElementById('link_sprites'), 
            sprite.x, sprite.y,
            size.w, size.h,
            player.position.x, player.position.y,
            size.w, size.h
        );

        ctx.restore();
    }

    function getLinkSprite(direction, status) {
        if (direction.substring(0,5) == 'north') {
            direction = 'up';
        }
        else if (direction.substring(0,5) == 'south') {
            direction = 'down';
        }
        var sprite = {
            x: link_sprites[direction].x,
            y: link_sprites[direction].y
        }
        
        sprite.x += 30*status

        return sprite;
    }
    function render_heart_sprites() {
        var player = '<%= @username %>';
        var current_health = players[player].health;
        var max_health = players[player].max_health;


        var render_half_heart = false;

        if (Math.ceil(current_health) - current_health >= 0.5) {
            render_half_heart = true;
        }

        var full_hearts = Math.floor(current_health);
        var empty_hearts = Math.floor(max_health-current_health);

        for (var i = 0; i < full_hearts; i++) {
            render_heart(i, 'whole');
        };

        if (render_half_heart) {
            render_heart(full_hearts, 'half');
        }
        //finally render empty hearts
        for (var i = 0; i < empty_hearts; i++) {
            var index = render_half_heart ? i+full_hearts+1 : i+full_hearts;
            render_heart(index, 'empty');
        }
    }
    function check_keys(e){
        //console.log(e.type + ' event being fired');
        e = e || event; // to deal with IE
        map[e.keyCode] = e.type == 'keydown'

        //console.log(map);
        e.preventDefault();

        if (player_dead && (map[SPACE] || map[UP] || map[LEFT] || map[RIGHT] || map[DOWN])) {
            console.log('emiting a game start event');
            player_dead = false;
            socket.emit('game-start', '<%= @username %>');

            render();
        }

        //we may be able to rework this where the position is calculated here and link moves here and then that information is sent to the server to check for collisions. it will simplify the code a lot
    }

    function render_heart(index, type) {
        var sprite = heart_sprites[type];

        var size = {
            w: 8,
            h: 8
        }

        ctx.drawImage(document.getElementById('link_hearts'),
            sprite.x, sprite.y,
            size.w, size.h,
            20 + (8 * index), 10,
            size.w, size.h
        )
    }

    function getSwordSprite(direction, frame) {
        if (direction.substring(0,5) == 'north') {
            direction = 'up'
        }
        else if (direction.substring(0,5) == 'south') {
            direction = 'down';
        }
        return sword_sprites[direction][frame];
    }
</script>
</body>